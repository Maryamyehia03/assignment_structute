#include <iostream>
using namespace std;
template<class type>
class node{
public:
    type data;
    node * next;
};
template<class type>
class Queue{
private:
    int size = 0;
    node<type>* head = NULL;
    node<type>* tail = NULL;
public:
bool isEmpty(){
    return head == NULL && tail == NULL;
}
void enqueue(type element){
    node<type>*temp = new node<type>;
    temp->data = element;
    temp->next = NULL;
    if(head == NULL){
        head = temp;
        tail = temp;
    }
    else{
        tail->next = temp;
        tail = temp;
    }
    size++;
}
type dequeue(){
    if(isEmpty())cout<<"SORRY LIST IS EMPTY ):";
    else{
        node<type>*temp = head;
        head = head->next;
        type result =  temp->data;
        delete temp;
        size--;
        return result;
    }
}
type First(){
    if(isEmpty())cout<<"SORRY LIST IS EMPTY ):";
    else{
        return head->data;
    }
}
int queueSize(){
    return size;
}
void clear(){
    while(head != NULL) {
        node<type> *temp = head;
        head = head->next;
        delete temp;
    }
    tail = NULL;
    size = 0;
}
void print(){
    if(isEmpty())cout<<"SORRY LIST IS EMPTY ):";
    else {
        node<type> *temp = head;
        cout << "List = ";
        while (temp != NULL) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << "\n";
    }
}
};
int main() {
    Queue<int>q1;
    q1.enqueue(1);
    q1.enqueue(2);
    q1.enqueue(3);
    q1.enqueue(4);
    q1.enqueue(5);
    q1.enqueue(6);
    q1.print();
    cout<<"List size  = "<<q1.queueSize()<<"\n";
   /* cout<<q1.dequeue()<<"\n";
    q1.print();
    cout<<"first element is ";
    cout<<q1.First()<<"\n";

    q1.clear();
    q1.print();*/
    return 0;
}
